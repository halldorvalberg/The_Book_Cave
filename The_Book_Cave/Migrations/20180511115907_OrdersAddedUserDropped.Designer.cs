// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using The_Book_Cave.Data;

namespace The_Book_Cave.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180511115907_OrdersAddedUserDropped")]
    partial class OrdersAddedUserDropped
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<string>("Summary");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<int>("CategoryId");

                    b.Property<int>("ISBN");

                    b.Property<string>("Image");

                    b.Property<int>("InStock");

                    b.Property<string>("Language");

                    b.Property<int>("Pages");

                    b.Property<int>("Price");

                    b.Property<DateTime>("PublicationYear");

                    b.Property<string>("Publisher");

                    b.Property<int>("Quantity");

                    b.Property<double>("Rating");

                    b.Property<int>("RatingCount");

                    b.Property<string>("Review");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Cart", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<string>("CartId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("Quantity");

                    b.HasKey("RecordId");

                    b.HasIndex("BookId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Order", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<string>("CartId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("Quantity");

                    b.HasKey("RecordId");

                    b.HasIndex("BookId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Ratings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<int>("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<string>("Review");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Cart", b =>
                {
                    b.HasOne("The_Book_Cave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("The_Book_Cave.Data.EntityModels.Order", b =>
                {
                    b.HasOne("The_Book_Cave.Data.EntityModels.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
